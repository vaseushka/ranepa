import pandas as pd
import numpy as np
import streamlit as st
import folium
from streamlit_folium import st_folium
from math import radians, sin, cos, sqrt, atan2

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
EARTH_RADIUS_KM = 6371.0

# –°–ø–∏—Å–æ–∫ —Å—Ç—Ä–∞–Ω, –∫–æ—Ç–æ—Ä—ã–µ –ù–ï –ø—Ä–∏–Ω–∏–º–∞—é—Ç —Ä–µ–π—Å—ã –∏–∑ –†–§
RESTRICTED_COUNTRIES = [
    # –ï–≤—Ä–æ–ø–∞
    "–ì–µ—Ä–º–∞–Ω–∏—è", "–§—Ä–∞–Ω—Ü–∏—è", "–ò—Ç–∞–ª–∏—è", "–ò—Å–ø–∞–Ω–∏—è", "–í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è",
    "–ü–æ–ª—å—à–∞", "–ß–µ—Ö–∏—è", "–°–ª–æ–≤–∞–∫–∏—è", "–í–µ–Ω–≥—Ä–∏—è", "–†—É–º—ã–Ω–∏—è",
    "–ë–æ–ª–≥–∞—Ä–∏—è", "–ì—Ä–µ—Ü–∏—è", "–ö–∏–ø—Ä", "–•–æ—Ä–≤–∞—Ç–∏—è", "–°–ª–æ–≤–µ–Ω–∏—è",
    "–ê–≤—Å—Ç—Ä–∏—è", "–®–≤–µ–π—Ü–∞—Ä–∏—è", "–ë–µ–ª—å–≥–∏—è", "–ù–∏–¥–µ—Ä–ª–∞–Ω–¥—ã", "–õ—é–∫—Å–µ–º–±—É—Ä–≥",
    "–î–∞–Ω–∏—è", "–®–≤–µ—Ü–∏—è", "–ù–æ—Ä–≤–µ–≥–∏—è", "–§–∏–Ω–ª—è–Ω–¥–∏—è", "–ò—Å–ª–∞–Ω–¥–∏—è",
    "–ò—Ä–ª–∞–Ω–¥–∏—è", "–ü–æ—Ä—Ç—É–≥–∞–ª–∏—è", "–ú–∞–ª—å—Ç–∞", "–≠—Å—Ç–æ–Ω–∏—è", "–õ–∞—Ç–≤–∏—è", "–õ–∏—Ç–≤–∞",
    
    # –°–µ–≤–µ—Ä–Ω–∞—è –ê–º–µ—Ä–∏–∫–∞
    "–°–®–ê", "–ö–∞–Ω–∞–¥–∞",
    
    # –ê–∑–∏–∞—Ç—Å–∫–æ-–¢–∏—Ö–æ–æ–∫–µ–∞–Ω—Å–∫–∏–π —Ä–µ–≥–∏–æ–Ω
    "–Ø–ø–æ–Ω–∏—è", "–Æ–∂–Ω–∞—è –ö–æ—Ä–µ—è", "–ê–≤—Å—Ç—Ä–∞–ª–∏—è", "–ù–æ–≤–∞—è –ó–µ–ª–∞–Ω–¥–∏—è",
    "–°–∏–Ω–≥–∞–ø—É—Ä", "–ú–∞–ª–∞–π–∑–∏—è", "–ò–Ω–¥–æ–Ω–µ–∑–∏—è", "–§–∏–ª–∏–ø–ø–∏–Ω—ã",
    
    # –î—Ä—É–≥–∏–µ
    "–£–∫—Ä–∞–∏–Ω–∞", "–ú–æ–ª–¥–æ–≤–∞"
]

def haversine_distance(lat1, lon1, lat2, lon2):
    """
    –í—ã—á–∏—Å–ª—è–µ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –¥–≤—É–º—è —Ç–æ—á–∫–∞–º–∏ –Ω–∞ —Å—Ñ–µ—Ä–µ
    –∏—Å–ø–æ–ª—å–∑—É—è —Ñ–æ—Ä–º—É–ª—É –≥–∞–≤–µ—Ä—Å–∏–Ω—É—Å–∞.
    """
    lat1, lon1, lat2, lon2 = map(radians, [lat1, lon1, lat2, lon2])
    
    dlat = lat2 - lat1
    dlon = lon2 - lon1
    
    a = sin(dlat/2)**2 + cos(lat1) * cos(lat2) * sin(dlon/2)**2
    c = 2 * atan2(sqrt(a), sqrt(1-a))
    
    return EARTH_RADIUS_KM * c

def load_airports_data():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ–± –∞—ç—Ä–æ–ø–æ—Ä—Ç–∞—Ö –∏–∑ CSV —Ñ–∞–π–ª–∞."""
    try:
        df = pd.read_csv('datasets/airports.csv', encoding="windows-1251", sep="|")
        return df
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return None

def is_russian_airport(airport_row):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∞—ç—Ä–æ–ø–æ—Ä—Ç —Ä–æ—Å—Å–∏–π—Å–∫–∏–º."""
    if 'country_rus' in airport_row.index:
        return airport_row['country_rus'] in ['–†–æ—Å—Å–∏—è', '–†–§', '–†–æ—Å—Å–∏–π—Å–∫–∞—è –§–µ–¥–µ—Ä–∞—Ü–∏—è']
    # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ IATA –∫–æ–¥—É
    return str(airport_row.get('iata_code', '')).startswith('U')

def can_fly_between(airport1, airport2, df):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –≤–æ–∑–º–æ–∂–Ω—ã –ª–∏ –ø–æ–ª–µ—Ç—ã –º–µ–∂–¥—É –¥–≤—É–º—è –∞—ç—Ä–æ–ø–æ—Ä—Ç–∞–º–∏ —Å —É—á–µ—Ç–æ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π.
    """
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—Ä–∞–Ω–∞—Ö –∞—ç—Ä–æ–ø–æ—Ä—Ç–æ–≤
    country1 = airport1.get('country_rus', '')
    country2 = airport2.get('country_rus', '')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ–¥–∏–Ω –∏–∑ –∞—ç—Ä–æ–ø–æ—Ä—Ç–æ–≤ —Ä–æ—Å—Å–∏–π—Å–∫–∏–º
    is_russian1 = is_russian_airport(airport1)
    is_russian2 = is_russian_airport(airport2)
    
    # –ï—Å–ª–∏ –æ–±–∞ –∞—ç—Ä–æ–ø–æ—Ä—Ç–∞ –≤ –†–æ—Å—Å–∏–∏ - –ø–æ–ª–µ—Ç—ã –≤–æ–∑–º–æ–∂–Ω—ã
    if is_russian1 and is_russian2:
        return True
    
    # –ï—Å–ª–∏ –æ–¥–∏–Ω –∞—ç—Ä–æ–ø–æ—Ä—Ç –≤ –†–æ—Å—Å–∏–∏, –∞ –¥—Ä—É–≥–æ–π –≤ —Å—Ç—Ä–∞–Ω–µ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏
    if is_russian1 and country2 in RESTRICTED_COUNTRIES:
        return False
    if is_russian2 and country1 in RESTRICTED_COUNTRIES:
        return False
    
    # –í –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞—è—Ö –ø–æ–ª–µ—Ç—ã –≤–æ–∑–º–æ–∂–Ω—ã
    return True

def find_nearest_airports(df, target_code, n=5):
    """
    –ù–∞—Ö–æ–¥–∏—Ç n –±–ª–∏–∂–∞–π—à–∏—Ö –∞—ç—Ä–æ–ø–æ—Ä—Ç–æ–≤ –∫ –∑–∞–¥–∞–Ω–Ω–æ–º—É —Å —É—á–µ—Ç–æ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –Ω–∞ –ø–æ–ª–µ—Ç—ã.
    """
    # –ù–∞—Ö–æ–¥–∏–º —Ü–µ–ª–µ–≤–æ–π –∞—ç—Ä–æ–ø–æ—Ä—Ç
    target = df[df['iata_code'] == target_code]
    
    if target.empty:
        return None
    
    target_airport = target.iloc[0]
    target_lat = target_airport['latitude']
    target_lon = target_airport['longitude']
    
    # –ò—Å–∫–ª—é—á–∞–µ–º —Ü–µ–ª–µ–≤–æ–π –∞—ç—Ä–æ–ø–æ—Ä—Ç –∏–∑ –ø–æ–∏—Å–∫–∞
    other_airports = df[df['iata_code'] != target_code].copy()
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º –∞—ç—Ä–æ–ø–æ—Ä—Ç—ã —Å —É—á–µ—Ç–æ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –Ω–∞ –ø–æ–ª–µ—Ç—ã
    valid_airports = []
    for idx, airport in other_airports.iterrows():
        if can_fly_between(target_airport, airport, df):
            valid_airports.append(idx)
    
    other_airports = other_airports.loc[valid_airports]
    
    # –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
    other_airports['distance_km'] = other_airports.apply(
        lambda row: haversine_distance(
            target_lat, target_lon,
            row['latitude'], row['longitude']
        ),
        axis=1
    )
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—é –∏ –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ n
    nearest = other_airports.nsmallest(n, 'distance_km')
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—Ä–∞–Ω–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    result_columns = ['iata_code', 'name_eng', 'city_eng', 'latitude', 'longitude', 'distance_km']
    if 'country_rus' in nearest.columns:
        result_columns.append('country_rus')
    
    return nearest[result_columns]

def create_map(target_airport, nearest_airports):
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–∞—Ä—Ç—É —Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –∞—ç—Ä–æ–ø–æ—Ä—Ç–æ–≤.
    """
    center_lat = target_airport.iloc[0]['latitude']
    center_lon = target_airport.iloc[0]['longitude']
    
    m = folium.Map(location=[center_lat, center_lon], zoom_start=5)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä —Ü–µ–ª–µ–≤–æ–≥–æ –∞—ç—Ä–æ–ø–æ—Ä—Ç–∞
    target_country = target_airport.iloc[0].get('country_rus', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
    folium.Marker(
        [center_lat, center_lon],
        popup=f"{target_airport.iloc[0]['name_eng']} ({target_airport.iloc[0]['iata_code']})\n{target_country}",
        icon=folium.Icon(color='red', icon='plane')
    ).add_to(m)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä—ã –±–ª–∏–∂–∞–π—à–∏—Ö –∞—ç—Ä–æ–ø–æ—Ä—Ç–æ–≤
    for _, airport in nearest_airports.iterrows():
        country = airport.get('country_rus', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        folium.Marker(
            [airport['latitude'], airport['longitude']],
            popup=f"{airport['name_eng']} ({airport['iata_code']})\n{country}\n–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {airport['distance_km']:.1f} –∫–º",
            icon=folium.Icon(color='blue', icon='plane')
        ).add_to(m)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ª–∏–Ω–∏—é –æ—Ç —Ü–µ–ª–µ–≤–æ–≥–æ –∞—ç—Ä–æ–ø–æ—Ä—Ç–∞
        folium.PolyLine(
            [[center_lat, center_lon], [airport['latitude'], airport['longitude']]],
            color='blue',
            weight=2,
            opacity=0.5
        ).add_to(m)
    
    return m

def main():
    st.set_page_config(page_title="–ü–æ–∏—Å–∫ –±–ª–∏–∂–∞–π—à–∏—Ö –∞—ç—Ä–æ–ø–æ—Ä—Ç–æ–≤", layout="wide")
    
    st.title("üõ´ –ü–æ–∏—Å–∫ –±–ª–∏–∂–∞–π—à–∏—Ö –∞—ç—Ä–æ–ø–æ—Ä—Ç–æ–≤")
    st.markdown("–ù–∞–π–¥–∏—Ç–µ 5 –±–ª–∏–∂–∞–π—à–∏—Ö –∞—ç—Ä–æ–ø–æ—Ä—Ç–æ–≤ –∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —Å —É—á–µ—Ç–æ–º –¥–µ–π—Å—Ç–≤—É—é—â–∏—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –Ω–∞ –ø–æ–ª–µ—Ç—ã")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    with st.spinner("–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ–± –∞—ç—Ä–æ–ø–æ—Ä—Ç–∞—Ö..."):
        df = load_airports_data()
    
    if df is None:
        st.stop()
    
    # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞—ç—Ä–æ–ø–æ—Ä—Ç–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞
    airport_options = df[['iata_code', 'name_eng']].dropna()
    airport_dict = dict(zip(
        airport_options['iata_code'],
        airport_options['iata_code'] + ' - ' + airport_options['name_eng']
    ))
    
    # –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤—ã–±–æ—Ä–∞ –∞—ç—Ä–æ–ø–æ—Ä—Ç–∞
    col1, col2 = st.columns([1, 2])
    
    with col1:
        selected_code = st.selectbox(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∞—ç—Ä–æ–ø–æ—Ä—Ç:",
            options=list(airport_dict.keys()),
            format_func=lambda x: airport_dict[x]
        )
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –∞—ç—Ä–æ–ø–æ—Ä—Ç–µ
        selected_airport = df[df['iata_code'] == selected_code].iloc[0]
        if 'country_rus' in selected_airport:
            st.info(f"–°—Ç—Ä–∞–Ω–∞: {selected_airport['country_rus']}")
            
            # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –¥–ª—è —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –∞—ç—Ä–æ–ø–æ—Ä—Ç–æ–≤
            if is_russian_airport(selected_airport):
                st.warning("‚ö†Ô∏è –î–ª—è —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –∞—ç—Ä–æ–ø–æ—Ä—Ç–æ–≤ –ø–æ–∫–∞–∑–∞–Ω—ã —Ç–æ–ª—å–∫–æ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
        
        if st.button("–ù–∞–π—Ç–∏ –±–ª–∏–∂–∞–π—à–∏–µ –∞—ç—Ä–æ–ø–æ—Ä—Ç—ã", type="primary"):
            # –ù–∞—Ö–æ–¥–∏–º –±–ª–∏–∂–∞–π—à–∏–µ –∞—ç—Ä–æ–ø–æ—Ä—Ç—ã
            with st.spinner("–ü–æ–∏—Å–∫ –±–ª–∏–∂–∞–π—à–∏—Ö –∞—ç—Ä–æ–ø–æ—Ä—Ç–æ–≤..."):
                nearest = find_nearest_airports(df, selected_code)
            
            if nearest is not None and not nearest.empty:
                st.session_state['nearest_airports'] = nearest
                st.session_state['target_code'] = selected_code
            else:
                st.error("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞—ç—Ä–æ–ø–æ—Ä—Ç–æ–≤ —Å —É—á–µ—Ç–æ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π")
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    if 'nearest_airports' in st.session_state:
        with col2:
            st.subheader("–ë–ª–∏–∂–∞–π—à–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∞—ç—Ä–æ–ø–æ—Ä—Ç—ã:")
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            display_df = st.session_state['nearest_airports'].copy()
            display_df['distance_km'] = display_df['distance_km'].round(1)
            
            # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏
            rename_dict = {
                'iata_code': '–ö–æ–¥',
                'name_eng': '–ê—ç—Ä–æ–ø–æ—Ä—Ç',
                'distance_km': '–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ (–∫–º)',
                'city_eng': '–ì–æ—Ä–æ–¥',
                'country_rus': '–°—Ç—Ä–∞–Ω–∞'
            }
            display_df = display_df.rename(columns=rename_dict)
            
            # –í—ã–±–∏—Ä–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            display_columns = ['–ö–æ–¥', '–ê—ç—Ä–æ–ø–æ—Ä—Ç', '–ì–æ—Ä–æ–¥', '–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ (–∫–º)']
            if '–°—Ç—Ä–∞–Ω–∞' in display_df.columns:
                display_columns.insert(2, '–°—Ç—Ä–∞–Ω–∞')
            
            st.dataframe(
                display_df[display_columns],
                hide_index=True,
                use_container_width=True
            )
        
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã
        st.subheader("üìç –ö–∞—Ä—Ç–∞ –∞—ç—Ä–æ–ø–æ—Ä—Ç–æ–≤")
        
        target_airport = df[df['iata_code'] == st.session_state['target_code']]
        map_obj = create_map(target_airport, st.session_state['nearest_airports'])
        
        st_folium(map_obj, width=None, height=600, returned_objects=[])
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è—Ö
        with st.expander("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è—Ö –Ω–∞ –ø–æ–ª–µ—Ç—ã"):
            st.markdown("""
            **–£—á–∏—Ç—ã–≤–∞—é—Ç—Å—è —Å–ª–µ–¥—É—é—â–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:**
            - –ò–∑ —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –∞—ç—Ä–æ–ø–æ—Ä—Ç–æ–≤ –ø–æ–∫–∞–∑–∞–Ω—ã —Ç–æ–ª—å–∫–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤ —Å—Ç—Ä–∞–Ω—ã, —Å –∫–æ—Ç–æ—Ä—ã–º–∏ –µ—Å—Ç—å –∞–≤–∏–∞—Å–æ–æ–±—â–µ–Ω–∏–µ
            - –ò—Å–∫–ª—é—á–µ–Ω—ã –∞—ç—Ä–æ–ø–æ—Ä—Ç—ã —Å—Ç—Ä–∞–Ω –ï–°, –°–®–ê, –ö–∞–Ω–∞–¥—ã –∏ –¥—Ä—É–≥–∏—Ö —Å—Ç—Ä–∞–Ω —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏
            - –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ —Ä–µ–π—Å—ã –ø–æ –†–æ—Å—Å–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
            """)

if __name__ == "__main__":
    main()
